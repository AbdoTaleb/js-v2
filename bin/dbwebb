#!/bin/sh
VERSION="1.0.0"



#
# Print usage of script
#
printUsage()
{
    echo
    echo "Utility dbwebb $VERSION by Mikael Roos, to upload, verify and publish course results when done."
    echo
    echo "Usage: dbwebb [options] <command> [arguments]"
    echo
    echo "Options:"
    echo 
    echo "  -h         Print this message and exit."
    echo "  -y         Do not wait for my input, just proceed."
    echo
    echo "Command:"
    echo 
    echo "  test      Test the connection by loggin in."
    echo "  sshkey    Create and install ssh-keys to avoid using password.."
    echo "  login     Login to the server using ssh."
    echo "  init      Init the remote server and create a destination directory."
    echo "  upload    Upload all files to the server."
    echo "  validate  Upload your files and validate that your results passes automatic tests."
    echo "  publish   Upload, Validate and Publish your course results to the web."
    echo
    echo "Example:"
    echo 
    echo "  $ dbwebb test"
    echo "  $ dbwebb sshkey"
    echo "  $ dbwebb login"
    echo "  $ dbwebb init"
    echo "  $ dbwebb upload"
    echo "  $ dbwebb -y validate kmom01"
    echo "  $ dbwebb -y publish all"
    echo 
    exit
}



#
# Login to the server
#
executeCommand()
{
    INTRO=$1

    if [ $SKIP_READLINE = "no" ]
    then
        echo "\n$INTRO"
        echo "Press a key to continue..."
        read void
    fi
    
    COMMAND=$2
    echo "\nExecuting command:"
    echo "$COMMAND"
    echo "-----------------------------------------"
    
    sh -c "$COMMAND"
    STATUS=$?

    echo "-----------------------------------------"
    
    MESSAGE=$3
    if [ $STATUS = 0 ]
    then
        echo "SUCCESS $MESSAGE\n"
    else 
        echo "FAILED $MESSAGE\n"
    fi 
}



#
# Test the connection to the server
#
testConnection()
{
    INTRO="I will now try to establish a connection with the server by loggin in to it."
    COMMAND="ssh ${USER}@${HOST} cat /etc/motd"
    MESSAGE="SUCCESS to establish the connection."
    executeCommand "$INTRO" "$COMMAND" "$MESSAGE"
}



#
# Login to the server
#
loginToServer()
{
    INTRO="I will now try to establish a connection with the server by loggin in to it."
    COMMAND="ssh ${USER}@${HOST}"
    MESSAGE="to establish the connection."
    executeCommand "$INTRO" "$COMMAND" "$MESSAGE"
}



#
# Init directory structure at the server.
#
initServer()
{
    INTRO="I will now try to init the remote server and create a directory where all uploaded files will reside."
    COMMAND="ssh ${USER}@${HOST} 'sh -c \"if [ ! -d dbwebb-kurser ]; then mkdir dbwebb-kurser; fi; chmod 700 dbwebb-kurser; ls -l dbwebb-kurser\"'"
    MESSAGE="to init the server."
    executeCommand "$INTRO" "$COMMAND" "$MESSAGE"
}



#
# Create and use ssh-keys to login.
#
installSshKeys()
{
    INTRO="First we need to create a ssh key and store it locally."
    COMMAND="ssh-keygen -t dsa"
    MESSAGE="to create the ssh key."
    executeCommand "$INTRO" "$COMMAND" "$MESSAGE"

    INTRO="I will now install the ssh-key at the remote server."
    COMMAND="cat $HOME/.ssh/id_dsa.pub | ssh $USER@$HOST 'cat >> .ssh/authorized_keys'"
    MESSAGE="to install the ssh-keys."
    executeCommand "$INTRO" "$COMMAND" "$MESSAGE"
}



#
# Upload results to the server
#
uploadToServer()
{
    INTRO="Your current working directory will now be synced to remote server."
    COMMAND="rsync -av --exclude literature --exclude .git -e ssh $SOURCE $DESTINATION" 
    MESSAGE="to upload data."
    executeCommand "$INTRO" "$COMMAND" "$MESSAGE"
}



#
# Validate the uploaded files
#
validateUploadedResults()
{
    INTRO="I will now try to init the remote server and create a directory where all uploaded files will reside."
    COMMAND="ssh ${USER}@${HOST} 'cd $BASEDIR/$PROJECT; bin/dbwebb-validate all'"
    MESSAGE="to validate course results."
    executeCommand "$INTRO" "$COMMAND" "$MESSAGE"
}



#
# Validate and Publish the uploaded files
#
publishResults()
{
    INTRO="I will now try to init the remote server and create a directory where all uploaded files will reside."
    COMMAND="ssh ${USER}@${HOST} 'cd $BASEDIR/$PROJECT; bin/dbwebb-validate all'"
    MESSAGE="to validate and publish all course results."
    executeCommand "$INTRO" "$COMMAND" "$MESSAGE"
}



#
# Main
#
if [ $# -lt 1 ]
then
    printUsage
fi

# Get settings from config-file
. bin/dbwebb-config


# Get options
SKIP_READLINE=no

while getopts ":hy" opt
do
    case $opt in
        (h) 
            printUsage
            ;;

        (y) 
            SKIP_READLINE=yes
            ;;

        \?)
            echo "Invalid option: -$OPTARG" >&2
            echo 
            echo "Use the following to get help."
            echo "dbwebb -h"
            echo
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))


# Execute command
CMD=$1
case $CMD in
    
    test)
        testConnection 
        ;;

    login)
        loginToServer 
        ;;

    init)
        initServer 
        ;;

    sshkey)
        installSshKeys 
        ;;

    upload)
        uploadToServer 
        ;;

    validate)
        validateUploadedResults 
        ;;

    publish)
        publishResults 
        ;;

    *)
        printUsage
        ;;
esac


