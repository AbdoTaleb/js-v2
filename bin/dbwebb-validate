#!/bin/sh

VERSION="1.0.0"
BASEDIR="dbwebb-kurser"
TARGET="$PWD/me"
BUILD1="$HOME/www"
BUILD2="$BUILD1/dbwebb"
BUILD="$BUILD2/javascript1"
TESTS=0
ASSERTS=0
FAULTS=0

HTML_MINIFIER="html-minifier --minify-js --minify-css --use-short-doctype --remove-attribute-quotes --collapse-boolean-attributes --conservative-collapse --collapse-whitespace --remove-comments"

UGLIFYJS="uglifyjs"
UGLIFYJS_OPTIONS="-m -c --screw-ie8 --comments"

CLEANCSS="cleancss --s1"



#
# Settings for this script
#
umask 022
export NODE_PATH=/usr/local/lib/node_modules


#
# Print usage of script
#
printUsage()
{
    echo
    echo "Utility dbwebb-validate $VERSION by Mikael Roos, to validate and publish course results when done."
    echo
    echo "Usage: dbwebb-validate [options] <item> [item]"
    echo
    echo "Options:"
    echo 
    echo "  -h, --help         Print this message and exit."
    echo "  -n, --no-publish   Only validate, do not publish."
    echo 
    echo "Item:"
    echo 
    echo "  kmom01    Validate (and publish) selected kmom."
    echo "  kmom02    Validate (and publish) selected kmom."
    echo "  kmom03    Validate (and publish) selected kmom."
    echo "  kmom04    Validate (and publish) selected kmom."
    echo "  kmom05    Validate (and publish) selected kmom."
    echo "  kmom06    Validate (and publish) selected kmom."
    echo "  kmom10    Validate (and publish) selected kmom."
    echo "  all       Validate (and publish) all kmoms."
    echo
    echo "Example:"
    echo 
    echo "  $ dbwebb-validate kmom01"
    echo "  $ dbwebb-validate --no-publish kmom01"
    echo 
    exit
}



#
# Perform an assert
#
assert()
{
    EXPECTED=$1
    TEST=$2
    MESSAGE=$3
    ASSERTS=$(( $ASSERTS + 1 ))

    sh -c "$TEST"

    if [ ! $? -eq $EXPECTED ]
    then
        FAULTS=$(( $FAULTS + 1 ))
        echo "FAILED. $MESSAGE\n"
        echo "Tests: $TESTS Asserts: $ASSERTS Faults: $FAULTS\n"
        echo "Correct the fault and run the validation again.\n\n"
        exit 1
    fi 
}



#
# Init the build directory
#
initBuildDir()
{
    echo "Init the build directory."

    if [ ! -d $BUILD1 ] 
    then
        mkdir $BUILD1
    fi

    if [ ! -d $BUILD2 ] 
    then
        mkdir $BUILD2
    fi

    if [ ! -d $BUILD ] 
    then
        mkdir $BUILD
    fi
}



#
# Test me/ at the beginning
#
testMeStart()
{
    TESTS=$(( $TESTS + 1 ))

    echo "Testing Me-directory items."

    rm -f $BUILD/me.html
    
    assert 0 "[ -d $TARGET ]" "Missing directory for me-pages: $TARGET"
    assert 0 "[ -f $TARGET/me.html ]" "Missing presentation file: $TARGET/me.html"

    rsync -a $TARGET/me.html $BUILD/
}



#
# Test Kmom01
#
testKmom01()
{
    TESTS=$(( $TESTS + 1 ))
    KMOM="kmom01"

    echo "Testing Kmom01 structure."

    assert 0 "[ -d $TARGET/$KMOM ]" "Missing directory: $TARGET/$KMOM"

    if [ ! -d $BUILD/$KMOM ] 
    then
        mkdir $BUILD/$KMOM
    fi
}



#
# Test kmom01/sandbox
#
testKmom01Sandbox()
{
    TESTS=$(( $TESTS + 1 ))
    KMOM="kmom01"
    DIR="sandbox"

    echo "Testing Kmom01 Sandbox example."

    rm -rf $BUILD/$KMOM/$DIR

    assert 0 "[ -d $TARGET/$KMOM/$DIR ]" "Missing directory: $TARGET/$KMOM/$DIR"
    assert 0 "jshint $TARGET/$KMOM/$DIR/js/*.js" "JSHint failed testing JavaScript files."
    assert 0 "bin/htmlhint $TARGET/$KMOM/$DIR/index.html" "HTMLHint failed testing HTML files."

    rsync -a $TARGET/$KMOM/$DIR/ $BUILD/$KMOM/$DIR/

    $HTML_MINIFIER $BUILD/$KMOM/$DIR/index.html --output $BUILD/$KMOM/$DIR/index.html
    
    $UGLIFYJS $BUILD/$KMOM/$DIR/js/main.js -o $BUILD/$KMOM/$DIR/js/main.js $UGLIFYJS_OPTIONS
    
    $CLEANCSS $BUILD/$KMOM/$DIR/style/style.css -o $BUILD/$KMOM/$DIR/style/style.css
}




#
# kmom01
#
kmom01()
{
    testKmom01
    testKmom01Sandbox
}



#
# kmom02
#
kmom02()
{
    pass
}



#
# kmom03
#
kmom03()
{
    pass
}



#
# kmom04
#
kmom04()
{
    pass
}



#
# kmom05
#
kmom05()
{
    pass
}



#
# kmom06
#
kmom06()
{
    pass
}



#
# kmom10
#
kmom10()
{
    pass
}



#
# Main
#
if [ $# != 3 ]
then
    echo
    #printUsage
fi

echo $0

CMD=$1

case $CMD in
    
    kmom01)
        initBuildDir
        testMeStart
        kmom01
        ;;

    kmom02)
        initBuildDir
        testMeStart
        kmom02
        ;;

    kmom03)
        initBuildDir
        testMeStart
        kmom03
        ;;

    kmom04)
        initBuildDir
        testMeStart
        kmom04
        ;;

    kmom05)
        initBuildDir
        testMeStart
        kmom05
        ;;

    kmom06)
        initBuildDir
        testMeStart
        kmom06
        ;;

    kmom10)
        initBuildDir
        testMeStart
        kmom10
        ;;

    all)
        initBuildDir
        testMeStart
        kmom01
        kmom02
        kmom03
        kmom04
        kmom05
        kmom06
        kmom10
        ;;

    *)
        printUsage
        ;;
esac

echo "OK\n\nTests: $TESTS Asserts: $ASSERTS Faults: $FAULTS\n"
exit 0
