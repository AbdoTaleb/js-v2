#!/bin/sh

VERSION="1.0.0"

TESTS=0
ASSERTS=0
FAULTS=0

ECHO="printf"


#
# External tools
#
JSHINT="jshint"

HTMLHINT="htmlhint"

HTML_MINIFIER="html-minifier"
HTML_MINIFIER_OPTIONS="--minify-js --minify-css --use-short-doctype --remove-attribute-quotes --collapse-boolean-attributes --conservative-collapse --collapse-whitespace --remove-comments"

UGLIFYJS="uglifyjs"
UGLIFYJS_OPTIONS="-m -c --screw-ie8 --comments"

CLEANCSS="cleancss --s1"



#
# Settings for this script
#
umask 022
export NODE_PATH=/usr/local/lib/node_modules


#
# Print usage of script
#
printUsage()
{
    $ECHO "\nUtility dbwebb-validate $VERSION by Mikael Roos, to validate and publish course results when done."
    $ECHO "\n"
    $ECHO "\nUsage: dbwebb-validate [options] <item> [item]"
    $ECHO "\n"
    $ECHO "Options:"
    $ECHO "\n"
    $ECHO "\n  -h         Print this message and exit."
    $ECHO "\n  -i         Ignore validation faults and proceed anyway."
    $ECHO "\n  -n         Only validate, do not publish."
    $ECHO "\n  -r         Print required external commands."
    $ECHO "\n  -v         Print version and exit."
    $ECHO "\n"
    $ECHO "\nItem:"
    $ECHO "\n"
    $ECHO "\n  kmom01    Validate (and publish) selected kmom."
    $ECHO "\n  kmom02    Validate (and publish) selected kmom."
    $ECHO "\n  kmom03    Validate (and publish) selected kmom."
    $ECHO "\n  kmom04    Validate (and publish) selected kmom."
    $ECHO "\n  kmom05    Validate (and publish) selected kmom."
    $ECHO "\n  kmom06    Validate (and publish) selected kmom."
    $ECHO "\n  kmom10    Validate (and publish) selected kmom."
    $ECHO "\n  all       Validate (and publish) all kmoms."
    $ECHO "\n"
    $ECHO "\nExample:"
    $ECHO "\n"
    $ECHO "\n  $ dbwebb-validate kmom01"
    $ECHO "\n  $ dbwebb-validate -n kmom01"
    $ECHO "\n"
    $ECHO "\n"
    exit
}



#
# Perform an assert
#
assert()
{
    EXPECTED=$1
    TEST=$2
    MESSAGE=$3
    ASSERTS=$(( $ASSERTS + 1 ))

    sh -c "$TEST"

    if [ ! $? -eq $EXPECTED ]
    then
        FAULTS=$(( $FAULTS + 1 ))
        $ECHO "\n\033[0;37;41mFAILED.\033[0m $MESSAGE\n"

        [ $IGNORE_FAULTS = "no" ] || return  

        $ECHO "\nTests: $TESTS Asserts: $ASSERTS Faults: $FAULTS\n"
        $ECHO "\nCorrect the fault and run the validation again.\n\n"
        exit 1
    fi 
}



#
# Check for installed commands
#
checkCommand()
{
    COMMAND=$1
    $ECHO "\nChecking $COMMAND"

    if ! hash $COMMAND 2>/dev/null
    then
        $ECHO >&2 "\nI require $COMMAND but it's not installed. Aborting."
        $ECHO >&2 "\nUse the following command to see what is required to run this script"
        $ECHO >&2 "\n  dbwebb-validate -r";
        $ECHO >&2 "\n";
        exit 1
    fi
}



#
# Check for installed tools
#
CHECKTOOLS="no"
checkTools()
{
    [ $CHECKTOOLS = "no" ] || return; CHECKTOOLS="yes"

    $ECHO "\nCheck for installed tools."

    checkCommand $JSHINT
    checkCommand $HTMLHINT

    [ $PUBLISH = "yes" ] || return

    checkCommand $HTML_MINIFIER
    checkCommand $UGLIFYJS
    checkCommand $CLEANCSS
}



#
# Init the build directory
#
BUILDDIR="no"
initBuildDir()
{
    [ $BUILDDIR = "no" ] || return; BUILDDIR="yes"
    [ $PUBLISH = "yes" ] || return

    $ECHO "\nInit the build directory."

    if [ ! -d $BUILD1 ] 
    then
        mkdir $BUILD1
    fi

    if [ ! -d $BUILD2 ] 
    then
        mkdir $BUILD2
    fi

    if [ ! -d $BUILD ] 
    then
        mkdir $BUILD
    fi
}



#
# Test me/ at the beginning
#
MESTART="no"
testMeStart()
{
    [ $MESTART = "no" ] || return; MESTART="yes"

    TESTS=$(( $TESTS + 1 ))

    $ECHO "\nTesting Me-directory items."

    assert 0 "[ -d $TARGET ]" "Missing directory for me-pages: $TARGET"
    assert 0 "[ -f $TARGET/me.html ]" "Missing presentation file: $TARGET/me.html"

    [ $PUBLISH = "yes" ] || return

    rsync -a $TARGET/me.html $BUILD/
    rsync -a --delete $TARGET/../example/ $BUILD/example/
}



#
# Test Kmom01
#
testKmom01()
{
    TESTS=$(( $TESTS + 1 ))
    KMOM="kmom01"

    $ECHO "\nTesting Kmom01 structure."

    assert 0 "[ -d $TARGET/$KMOM ]" "Missing directory: $TARGET/$KMOM"

    [ $PUBLISH = "yes" ] || return

    if [ ! -d $BUILD/$KMOM ] 
    then
        mkdir $BUILD/$KMOM
    fi
}



#
# Test kmom01/sandbox
#
testKmom01Sandbox()
{
    TESTS=$(( $TESTS + 1 ))
    KMOM="kmom01"
    DIR="sandbox"

    $ECHO "\nTesting Kmom01 Sandbox example."

    assert 0 "[ -d $TARGET/$KMOM/$DIR ]" "Missing directory: $TARGET/$KMOM/$DIR"

    FILE="$TARGET/$KMOM/$DIR/js/*.js"
    assert 0 "$JSHINT $FILE" "JSHint failed testing JavaScript files:\n$FILE"

    FILE="$TARGET/$KMOM/$DIR/index.html"
    assert 0 "$HTMLHINT $FILE" "HTMLHint failed testing HTML file:\n$FILE"

    [ $PUBLISH = "yes" ] || return

    rsync -a $TARGET/$KMOM/$DIR/ $BUILD/$KMOM/$DIR/

    $HTML_MINIFIER $HTML_MINIFIER_OPTIONS $BUILD/$KMOM/$DIR/index.html --output $BUILD/$KMOM/$DIR/index.html
    
    $UGLIFYJS $BUILD/$KMOM/$DIR/js/main.js -o $BUILD/$KMOM/$DIR/js/main.js $UGLIFYJS_OPTIONS
    
    $CLEANCSS $BUILD/$KMOM/$DIR/style/style.css -o $BUILD/$KMOM/$DIR/style/style.css
}




#
# kmom01
#
kmom01()
{
    checkTools
    initBuildDir
    testMeStart
    testKmom01
    testKmom01Sandbox
}



#
# kmom02
#
kmom02()
{
    checkTools
    initBuildDir
    testMeStart
}



#
# kmom03
#
kmom03()
{
    checkTools
    initBuildDir
    testMeStart
}



#
# kmom04
#
kmom04()
{
    checkTools
    initBuildDir
    testMeStart
}



#
# kmom05
#
kmom05()
{
    checkTools
    initBuildDir
    testMeStart
}



#
# kmom06
#
kmom06()
{
    checkTools
    initBuildDir
    testMeStart
}



#
# kmom10
#
kmom10()
{
    checkTools
    initBuildDir
    testMeStart
}



#
# Main
#
if [ $# != 3 ]
then
    $ECHO
    #printUsage
fi

# Get settings from config-file
. bin/dbwebb-config


# Get options
PUBLISH="yes"
IGNORE_FAULTS="no"

while getopts ":hinrv" opt
do
    case $opt in
        (h) 
            printUsage
            ;;

        (i) 
            IGNORE_FAULTS="yes"
            ;;

        (n) 
            PUBLISH="no"
            ;;

        (r) 
            $ECHO "\nRequired external tools are:"
            $ECHO "\n  npm install jshint html-minifier uglify-js clean-css htmlhint"
            $ECHO "\n"
            $ECHO "\n"
            exit 0
            ;;

        (v) 
            $ECHO $VERSION
            exit 0
            ;;

        \?)
            $ECHO "\nInvalid option: -$OPTARG" >&2
            $ECHO "\n"
            $ECHO "\nUse the following to get help."
            $ECHO "\ndbwebb-validate -h"
            $ECHO "\n"
            $ECHO "\n"
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))


# Execute command
CMD=$1
case $CMD in
    
    kmom01)
        kmom01
        ;;

    kmom02)
        kmom02
        ;;

    kmom03)
        kmom03
        ;;

    kmom04)
        kmom04
        ;;

    kmom05)
        kmom05
        ;;

    kmom06)
        kmom06
        ;;

    kmom10)
        kmom10
        ;;

    all)
        kmom01
        kmom02
        kmom03
        kmom04
        kmom05
        kmom06
        kmom10
        ;;

    *)
        printUsage
        ;;
esac

if [ $FAULTS -gt 0 ]
then
    $ECHO "\n\033[0;37;41mFAILED.\033[0m"
    $ECHO "\nTests: $TESTS Asserts: $ASSERTS Faults: $FAULTS\n"
    exit 1
fi

$ECHO "\n\033[0;30;42mOK\033[0m"
$ECHO "\nTests: $TESTS Asserts: $ASSERTS Faults: $FAULTS\n"
exit 0
